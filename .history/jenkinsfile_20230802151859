pipeline {
    agent any 
    environment {
        VERSION = "${env.BUILD_ID}"
    }

    stages {

        stage('sonar quality check '){

            agent {
                docker {
                    image 'maven'
                    args '--user root'
                }
            }

            steps{
                script {
                    withSonarQubeEnv(credentialsId: 'sonarqube-token', installationName: 'sonarqube-server') {
                        sh 'mvn clean package sonar:sonar'
                    }
                }
            }
        }

        stage('Quality Gate status '){
            steps {

                script{
                    waitForQualityGate abortPipeline: false, credentialsId: 'sonarqube-token'
                }
            }
        }

        stage ('docker build & docker push to nexus repo'){
            steps{
                withCredentials([string(credentialsId: 'nexus_creds', variable: 'nexus_creds')]) {
                    script{
                        sh '''
                        docker build -t 172.17.0.40:8083/springapp:${VERSION} . 

                        docker login -u admin -p $nexus_creds 172.17.0.40:8083

                        docker push  172.17.0.40:8083/springapp:${VERSION}

                        docker rmi 172.17.0.40:8083/springapp:${VERSION}
                        '''
                    }
                }
            }
        }
        stage ( 'pushing the helm chart to nexus '){
            steps{

                script{
                    withCredentials([string(credentialsId: 'nexus_creds', variable: 'nexus_creds')]) {
                        dir('./kubernetes/'){
                            sh '''
                                helmversion=$(helm show chart myapp | grep version | cut -d: -f 2 | tr -d ' ')
                                curl -u admin:$nexus_password http://nexus_machine_ip:8081/repository/helm-hosted/ --upload-file myapp-${helmversion}.tgz -v
                            '''
                        }
                        
                    }
                }
            }
        }
    }
    post {
		always {
			mail bcc: '', body: "<br>Project: ${env.JOB_NAME} <br>Build Number: ${env.BUILD_NUMBER} <br> URL de build: ${env.BUILD_URL}", cc: '', charset: 'UTF-8', from: '', mimeType: 'text/html', replyTo: '', subject: "${currentBuild.result} CI: Project name -> ${env.JOB_NAME}", to: "bembemed50@gmail.com";  
		}
	}
}